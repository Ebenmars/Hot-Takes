{"ast":null,"code":"import{useEffect,useState}from\"react\";import supabase from\"./supabase\";import\"./styles.css\";import CatagoryFilter from\"./CatagoryFilter\";import NewPostForm from\"./NewPostForm\";import PostFeed from\"./PostFeed\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function App(){// the form is initially at false which means hidden\nconst[showForm,setShowForm]=useState(false);//used to define posts\nconst[posts,setPosts]=useState([]);const[isLoading,setIsLoading]=useState(false);const[currentCategory,setCurrentCategory]=useState(\"Home\");//using  this to get the posts from the database\nuseEffect(function(){async function getPosts(){setIsLoading(true);let query=supabase.from(\"posts\").select(\"*\");if(currentCategory!==\"Home\"){query=query.eq(\"category\",currentCategory);}//I will make a dropdown menu and user can pick if they want most recent posts or if they want the votes with the most upvots\nconst{data:posts,error}=await query// .eq(\"category\",\"Home\")\n.order(\"thumbsUp\",{ascending:false}).limit(1000);//setting the posts\nif(!error){setPosts(posts);}else{alert(\"Cant get data\");}setPosts(posts);//after the data has loaded\nsetIsLoading(false);}getPosts();},[currentCategory]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{show:showForm,setShowForm:setShowForm}),showForm?/*#__PURE__*/_jsx(NewPostForm,{setPosts:setPosts,setShowForm:setShowForm}):null,/*#__PURE__*/_jsxs(\"main\",{className:\"main\",children:[/*#__PURE__*/_jsx(CatagoryFilter,{setCurrentCategory:setCurrentCategory}),isLoading?/*#__PURE__*/_jsx(Loader,{}):/*#__PURE__*/_jsx(PostFeed,{posts:posts,setPosts:setPosts})]}),/*#__PURE__*/_jsx(\"footer\",{children:\"Me\"})]});}function Loader(){return/*#__PURE__*/_jsx(\"p\",{style:{textTransform:\"uppercase\",textAlign:\"center\",marginTop:\"100px\"},children:\"Loading... Please Wait\"});}function Header(_ref){let{show,setShowForm}=_ref;const appTitle=\"Hot Takes\";return/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"logo\",children:/*#__PURE__*/_jsx(\"h1\",{children:appTitle})}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",id:\"create-post\",onClick:()=>setShowForm(show=>!show),children:show?\"x\":\"+\"})]});}export default App;","map":{"version":3,"names":["useEffect","useState","supabase","CatagoryFilter","NewPostForm","PostFeed","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","showForm","setShowForm","posts","setPosts","isLoading","setIsLoading","currentCategory","setCurrentCategory","getPosts","query","from","select","eq","data","error","order","ascending","limit","alert","children","Header","show","className","Loader","style","textTransform","textAlign","marginTop","_ref","appTitle","id","onClick"],"sources":["/Users/ignite/Hot Takes/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport supabase from \"./supabase\";\nimport \"./styles.css\";\nimport CatagoryFilter from \"./CatagoryFilter\";\nimport NewPostForm from \"./NewPostForm\";\nimport PostFeed from \"./PostFeed\";\n\nfunction App() {\n  // the form is initially at false which means hidden\n  const [showForm, setShowForm] = useState(false);\n  //used to define posts\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentCategory, setCurrentCategory] = useState(\"Home\");\n\n  //using  this to get the posts from the database\n  useEffect(function () {\n    async function getPosts() {\n      setIsLoading(true);\n\n      let query = supabase.from(\"posts\").select(\"*\");\n\n      if (currentCategory !== \"Home\") {\n        query = query.eq(\"category\", currentCategory);\n      }\n      //I will make a dropdown menu and user can pick if they want most recent posts or if they want the votes with the most upvots\n      const { data: posts, error } = await query\n        // .eq(\"category\",\"Home\")\n        .order(\"thumbsUp\", { ascending: false })\n        .limit(1000);\n\n      //setting the posts\n      if (!error) {\n        setPosts(posts);\n      } else {\n        alert(\"Cant get data\");\n      }\n      setPosts(posts);\n      //after the data has loaded\n      setIsLoading(false);\n    }\n    getPosts();\n  }, [currentCategory]);\n\n  return (\n    <>\n      <Header show={showForm} setShowForm={setShowForm} />\n      {/* use state to show form, if the sate is false dont show anything */}\n      {showForm ? (\n        <NewPostForm setPosts={setPosts} setShowForm={setShowForm} />\n      ) : null}\n\n      <main className=\"main\">\n        {/* Component of the tags section */}\n        <CatagoryFilter setCurrentCategory={setCurrentCategory} />\n        {/* if the data is loading show the message, else show the posts   */}\n        {isLoading ? <Loader /> : <PostFeed posts={posts}  setPosts={setPosts}/>}\n      </main>\n      <footer>Me</footer>\n    </>\n  );\n}\nfunction Loader() {\n  return (\n    <p\n      style={{\n        textTransform: \"uppercase\",\n        textAlign: \"center\",\n        marginTop: \"100px\",\n      }}\n    >\n      Loading... Please Wait\n    </p>\n  );\n}\n\nfunction Header({ show, setShowForm }) {\n  const appTitle = \"Hot Takes\";\n\n  return (\n    <header className=\"header\">\n      <div className=\"logo\">\n        <h1>{appTitle}</h1>\n      </div>\n      {/* change state. if user clicks ones its true if they click again the state is now false */}\n      <button\n        className=\"btn\"\n        id=\"create-post\"\n        onClick={() => setShowForm((show) => !show)}\n      >\n        {show ? \"x\" : \"+\"}\n      </button>\n    </header>\n  );\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}